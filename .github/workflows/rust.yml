name: Rust CI/CD

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: 1

jobs:
  # Test job for PRs and main branch
  test:
    name: Test
    runs-on: ubuntu-latest
    if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Build
      run: cargo build --verbose
    
    # - name: Run tests
    #   run: cargo test --verbose
    
    # - name: Check formatting
    #   run: cargo fmt -- --check
    
    # - name: Clippy
    #   run: cargo clippy -- -D warnings

  # Build job for releases (when tags are pushed)
  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            artifact_name: cargo_test-x86_64-unknown-linux-musl
          - target: aarch64-unknown-linux-musl
            artifact_name: cargo_test-aarch64-unknown-linux-musl

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        target: ${{ matrix.target }}
    
    - name: Install musl-tools
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-
    
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }} --verbose
    
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: target/${{ matrix.target }}/release/cargo_test

  # Create release job
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-release
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: List files
      run: find artifacts -type f
    
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        body: |
          ## Release ${{ steps.get_version.outputs.VERSION }}
          
          ### Binaries
          
          This release includes statically linked Linux binaries built with musl:
          
          - **Linux x64 (musl)**: `cargo_test-x86_64-unknown-linux-musl`
          - **Linux ARM64 (musl)**: `cargo_test-aarch64-unknown-linux-musl`
          
          ### Installation
          
          Download the appropriate binary for your architecture and make it executable:
          
          ```bash
          chmod +x cargo_test-<architecture>
          ```
          
          ### Benefits of musl builds
          
          - **Static linking**: No external dependencies required
          - **Portable**: Works on any Linux distribution
          - **Smaller size**: Optimized for production deployment
          
          ### Building from source
          
          ```bash
          git clone https://github.com/${{ github.repository }}
          cd ${{ github.event.repository.name }}
          cargo build --release
          ```
    
    - name: Upload Release Assets - Linux x64 musl
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/cargo_test-x86_64-unknown-linux-musl
        asset_name: cargo_test-x86_64-unknown-linux-musl
        asset_content_type: application/octet-stream
    
    - name: Upload Release Assets - Linux ARM64 musl
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/cargo_test-aarch64-unknown-linux-musl
        asset_name: cargo_test-aarch64-unknown-linux-musl
        asset_content_type: application/octet-stream
